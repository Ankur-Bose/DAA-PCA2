//binary search
int binarysearch(int *arr, int low, int high, int target)
{
    while(low<high)
    {
        int mid = (low+high)/2;
        if(target == mid)
        {
            return mid;
        }
        else if(target>mid)
        {
            return binarysearch(arr, mid+1, high, target);
        }
        else if(target<mid)
        {
            return binarysearch(arr,0, mid-1, target);
        }
    }
    return -1;
}





//quick sort
void quicksort(int *arr, int n)
{
    quick(arr, 0, n - 1);
}
void quick(int *arr, int low, int high)
{
    if (low < high)
    {
        int pivot = partition(arr, low, high);
        quick(arr, low, pivot - 1);
        quick(arr, pivot + 1, high);
    }
}
int partition(int *arr, int low, int high)
{
    int i = low;
    int pivot_value = high;
    for (int j = low; j <= high; j++)
    {
        if (arr[j] < arr[pivot_value])
        {
            swap(&arr[i], &arr[j]);
            i++;
        }
    }
    swap(&arr[i], &arr[high]);
    return i;
}







//merge sort
#include<stdio.h>
#include<stdlib.h>
#define max 8
int arr[max];

void display(int *arr, int n)
{
    for(int i = 0; i < n; i++)
    {
        printf("%d ",arr[i]);
    }
}
void mergesort(int low, int high)
{
    if(low<high)
    {
        int mid = (low+high) / 2;
        mergesort(low,mid);
        mergesort(mid+1,high);
        merge(low,mid,high);
    }
}

void merge(int low, int mid, int high)
{
    int i = low;
    int j = mid+1;
    int k = low;
    int temp[max];
    while((i<=mid&&j<=high))
    {
        if(arr[i]<arr[j])
        {
            temp[k++] = arr[i++];
        }
        else
        {
            temp[k++] = arr[j++];
        }
    }
    while (i<=mid)
    {
        temp[k++] = arr[i++];
    }
    while (j<=high)
    {
        temp[k++] = arr[j++];
    }
    for(i=low;i<=high;i++)
    {
        arr[i]=temp[i];
    }
}
int main()
{
    int n;
    printf("Enter size of array \n");
    scanf("%d",&n);
    printf("Enter the elements ");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&arr[i]);
    }
    mergesort(0,n-1);
    display(arr,n);
return 0 ; 
}
















//heap sort

#include<stdio.h>
#include<stdlib.h>

void maxheapify(int a[], int f, int size);

void maxheap(int a[], int beg, int end)
{
    int i;
    for(i = end/2; i>=beg; i--)
        maxheapify(a, i, end);
}

void maxheapify(int a[], int f, int size)
{
    int max = f, l=f*2, r=f*2+1, t;
    if(l<=size && a[l]>a[max])
        max = l;
    if(r<=size && a[r]>a[max])
        max = r;
    if(f!=max)
    {
        t=a[f];
        a[f]=a[max];
        a[max]=t;
        maxheapify(a,max,size);
    }
}

void heapsort(int *arr, int n)
{
    int i,t;
    for(i=n;i>=2;i--)
    {
        t = arr[1];
        arr[1] = arr[i];
        arr[i] = t;
        maxheapify(arr,1,i-1);
    }
}

int main()
{
    int a[10], i;
    printf("Enter array elements: ");
    for(i=1;i<10;i++)
        scanf("%d",&a[i]);
    maxheap(a,1,9);
    heapsort(a,9);
    printf("Sorted Array: \n");
    for(i=1;i<10;i++)
        printf("%d ",a[i]);
    return 0; 
}














//Fractional Knap Sack
#include <stdio.h>
int max(int a, int b)
{
    return (a > b) ? a : b;
}

int knapSack(int W, int wt[], int val[], int n)
{
    if (n == 0 || W == 0)
        return 0;
    if (wt[n - 1] > W)
        return knapSack(W, wt, val, n - 1);
    else
        return max(
            val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1),
            knapSack(W, wt, val, n - 1));
}

int main()
{
    int profit[] = {60, 100, 120};
    int weight[] = {10, 20, 30};
    int W = 50;
    int n = sizeof(profit) / sizeof(profit[0]);
    printf("%d", knapSack(W, weight, profit, n));
    return 0;
}











//activity selection
void printMaxActivities(int s[], int f[], int n) 
{ 
    int i, j; 
  
    printf("Following activities are selected\n"); 
  
    // The first activity always gets selected 
    i = 0; 
    printf("%d ", i); 
  
    // Consider rest of the activities 
    for (j = 1; j < n; j++) { 
        // If this activity has start time greater than or 
        // equal to the finish time of previously selected 
        // activity, then select it 
        if (s[j] >= f[i]) { 
            printf("%d ", j); 
            i = j; 
        } 
    } 
} 











//job sequencing 

